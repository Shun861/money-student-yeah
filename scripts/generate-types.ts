#!/usr/bin/env tsx

import { execSync } from 'child_process';
import { writeFileSync, mkdirSync, existsSync } from 'fs';
import { join } from 'path';
import * as dotenv from 'dotenv';

// 環境変数を読み込み
dotenv.config({ path: join(process.cwd(), '.env.local') });

/**
 * Supabase型生成スクリプト
 * 
 * 環境変数からSupabaseプロジェクト情報を取得し、
 * TypeScript型定義を生成します。
 */

interface GenerateTypesConfig {
  projectId: string;
  supabaseUrl?: string; // undefined許可
  outputPath: string;
  schemas: string[];
}

/**
 * 環境変数からSupabaseプロジェクトIDを抽出
 */
function extractProjectIdFromUrl(url: string): string | null {
  // URL形式: https://[project-id].supabase.co
  const match = url.match(/https:\/\/([^.]+)\.supabase\.co/);
  return match ? match[1] : null;
}

/**
 * 環境変数の確認と設定
 */
function getSupabaseConfig(): GenerateTypesConfig {
  const supabaseUrl = process.env['NEXT_PUBLIC_SUPABASE_URL'];
  const projectId = process.env['SUPABASE_PROJECT_ID'] || 
    (supabaseUrl ? extractProjectIdFromUrl(supabaseUrl) : null);

  if (!projectId) {
    throw new Error(
      'Supabase project ID not found. Set SUPABASE_PROJECT_ID environment variable or ensure NEXT_PUBLIC_SUPABASE_URL is properly formatted.'
    );
  }

  return {
    projectId,
    supabaseUrl,
    outputPath: join(process.cwd(), 'src', 'types', 'supabase.ts'),
    schemas: ['public']
  };
}

/**
 * 型生成の実行
 */
async function generateTypes() {
  try {
    console.log('🔄 Supabase型生成を開始...');
    
    const config = getSupabaseConfig();
    console.log(`📋 プロジェクトID: ${config.projectId}`);
    console.log(`📁 出力先: ${config.outputPath}`);

    // 出力ディレクトリが存在しない場合は作成
    const outputDir = join(process.cwd(), 'src', 'types');
    if (!existsSync(outputDir)) {
      mkdirSync(outputDir, { recursive: true });
      console.log(`📁 ディレクトリを作成しました: ${outputDir}`);
    }

    // Supabase CLI を使用して型を生成
    const command = `npx supabase gen types typescript --project-id ${config.projectId} --schema ${config.schemas.join(',')}`;
    console.log(`🚀 実行コマンド: ${command}`);

    const types = execSync(command, { 
      encoding: 'utf-8',
      cwd: process.cwd(),
      stdio: ['pipe', 'pipe', 'pipe']
    });

    // TypeScript型定義を追加のコメントと共に保存
    const content = `/**
 * Supabase Database Types
 * 
 * This file is auto-generated by the Supabase CLI.
 * Do not edit this file manually.
 * 
 * Generated on: ${new Date().toISOString()}
 * Project ID: ${config.projectId}
 * Schemas: ${config.schemas.join(', ')}
 * 
 * To regenerate this file, run: npm run generate-types
 */

${types}

// Custom helper types for easier usage (avoiding conflicts with generated types)
export type AppTables<T extends keyof Database['public']['Tables']> = Database['public']['Tables'][T]['Row'];
export type AppTablesInsert<T extends keyof Database['public']['Tables']> = Database['public']['Tables'][T]['Insert'];
export type AppTablesUpdate<T extends keyof Database['public']['Tables']> = Database['public']['Tables'][T]['Update'];

// Commonly used table types with app-specific naming
export type AppProfile = AppTables<'profiles'>;
export type AppProfileInsert = AppTablesInsert<'profiles'>;
export type AppProfileUpdate = AppTablesUpdate<'profiles'>;

export type AppEmployer = AppTables<'employers'>;
export type AppEmployerInsert = AppTablesInsert<'employers'>;
export type AppEmployerUpdate = AppTablesUpdate<'employers'>;

export type AppIncome = AppTables<'incomes'>;
export type AppIncomeInsert = AppTablesInsert<'incomes'>;
export type AppIncomeUpdate = AppTablesUpdate<'incomes'>;

export type AppShift = AppTables<'shifts'>;
export type AppShiftInsert = AppTablesInsert<'shifts'>;
export type AppShiftUpdate = AppTablesUpdate<'shifts'>;

export type AppWorkSchedule = AppTables<'work_schedules'>;
export type AppWorkScheduleInsert = AppTablesInsert<'work_schedules'>;
export type AppWorkScheduleUpdate = AppTablesUpdate<'work_schedules'>;
`;

    writeFileSync(config.outputPath, content);

    console.log('✅ Supabase型生成が完了しました！');
    console.log(`📄 ファイル: ${config.outputPath}`);
    
    // 生成されたファイルの行数を表示
    const lineCount = content.split('\n').length;
    console.log(`📊 生成された行数: ${lineCount} 行`);

  } catch (error) {
    console.error('❌ 型生成中にエラーが発生しました:');
    
    if (error instanceof Error) {
      console.error(`エラー: ${error.message}`);
      
      // Supabase CLIのエラーの場合、詳細情報を表示
      if (error.message.includes('supabase')) {
        console.error('\n💡 解決方法:');
        console.error('1. Supabase CLIにログインしているか確認: npx supabase login');
        console.error('2. プロジェクトIDが正しいか確認');
        console.error('3. プロジェクトへのアクセス権限があるか確認');
      }
    } else {
      console.error(error);
    }
    
    process.exit(1);
  }
}

/**
 * スクリプトが直接実行された場合
 */
if (require.main === module) {
  generateTypes().catch(console.error);
}

export { generateTypes, getSupabaseConfig };
