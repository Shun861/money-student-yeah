import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { ErrorBoundary } from "@/components/ui/ErrorBoundary";
import { ClientErrorProvider } from "@/components/ClientErrorProvider";
import { ToastProvider } from "@/components/ToastProvider";
import { validateEnvironment, checkEnvironmentStatus } from '@/lib/env';

// Issue #46: Ëµ∑ÂãïÊôÇÁí∞Â¢ÉÂ§âÊï∞„ÉÅ„Çß„ÉÉ„ÇØ
if (typeof window === 'undefined') {
  // „Çµ„Éº„Éê„Éº„Çµ„Ç§„Éâ„Åß„ÅÆ„ÅøÂÆüË°å
  try {
    validateEnvironment();
    
    // ÈñãÁô∫Áí∞Â¢É„Åß„ÅØË©≥Á¥∞„Å™Ë®∫Êñ≠ÊÉÖÂ†±„ÇíË°®Á§∫
    if (process.env.NODE_ENV === 'development') {
      const status = checkEnvironmentStatus();
      console.log(`üöÄ Starting on ${status.platform} (${status.environment})`);
      
      if (status.warnings.length > 0) {
        console.warn('‚ö†Ô∏è  Environment warnings:', status.warnings);
      }
    }
  } catch (error) {
    console.error('üí• Failed to start application:', error);
    throw error;
  }
}

const geistSans = Geist({
	variable: "--font-geist-sans",
	subsets: ["latin"],
});

const geistMono = Geist_Mono({
	variable: "--font-geist-mono",
	subsets: ["latin"],
});

export const metadata: Metadata = {
	title: "Create Next App",
	description: "Generated by create next app",
};

export default function RootLayout({
	children,
}: Readonly<{
	children: React.ReactNode;
}>) {
	return (
		<html lang="ja">
			<body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
				<ErrorBoundary context="RootLayout">
					<ToastProvider>
						<ClientErrorProvider>
							{children}
						</ClientErrorProvider>
					</ToastProvider>
				</ErrorBoundary>
			</body>
		</html>
	);
}
