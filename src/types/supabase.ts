/**
 * Supabase Database Types
 * 
 * This file is auto-generated by the Supabase CLI.
 * Do not edit this file manually.
 * 
 * Generated on: 2025-09-11T12:14:49.353Z
 * Project ID: bfnefednieguhycgdxny
 * Schemas: public
 * 
 * To regenerate this file, run: npm run generate-types
 */

export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export type Database = {
  // Allows to automatically instantiate createClient with right options
  // instead of createClient<Database, { PostgrestVersion: 'XX' }>(URL, KEY)
  __InternalSupabase: {
    PostgrestVersion: "13.0.4"
  }
  public: {
    Tables: {
      employers: {
        Row: {
          created_at: string
          hourly_wage: number | null
          id: string
          name: string
          size: string | null
          updated_at: string
          user_id: string
        }
        Insert: {
          created_at?: string
          hourly_wage?: number | null
          id?: string
          name: string
          size?: string | null
          updated_at?: string
          user_id: string
        }
        Update: {
          created_at?: string
          hourly_wage?: number | null
          id?: string
          name?: string
          size?: string | null
          updated_at?: string
          user_id?: string
        }
        Relationships: []
      }
      incomes: {
        Row: {
          amount: number
          created_at: string
          date: string
          employer_id: string | null
          id: string
          source: string | null
          updated_at: string
          user_id: string
        }
        Insert: {
          amount: number
          created_at?: string
          date: string
          employer_id?: string | null
          id?: string
          source?: string | null
          updated_at?: string
          user_id: string
        }
        Update: {
          amount?: number
          created_at?: string
          date?: string
          employer_id?: string | null
          id?: string
          source?: string | null
          updated_at?: string
          user_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "incomes_employer_id_fkey"
            columns: ["employer_id"]
            isOneToOne: false
            referencedRelation: "employers"
            referencedColumns: ["id"]
          },
        ]
      }
      profiles: {
        Row: {
          birth_date: string | null
          bracket: number | null
          created_at: string
          default_hourly_wage: number | null
          display_name: string | null
          employer_size: string | null
          grade: string | null
          id: string
          insurance_status: string | null
          is_parent_dependent: boolean | null
          living_status: string | null
          monthly_allowance: number | null
          onboarding_completed: boolean
          other_income: number | null
          parent_insurance_type: string | null
          residence_city: string | null
          student_type: string | null
          terms_accepted: boolean
          updated_at: string
        }
        Insert: {
          birth_date?: string | null
          bracket?: number | null
          created_at?: string
          default_hourly_wage?: number | null
          display_name?: string | null
          employer_size?: string | null
          grade?: string | null
          id: string
          insurance_status?: string | null
          is_parent_dependent?: boolean | null
          living_status?: string | null
          monthly_allowance?: number | null
          onboarding_completed?: boolean
          other_income?: number | null
          parent_insurance_type?: string | null
          residence_city?: string | null
          student_type?: string | null
          terms_accepted?: boolean
          updated_at?: string
        }
        Update: {
          birth_date?: string | null
          bracket?: number | null
          created_at?: string
          default_hourly_wage?: number | null
          display_name?: string | null
          employer_size?: string | null
          grade?: string | null
          id?: string
          insurance_status?: string | null
          is_parent_dependent?: boolean | null
          living_status?: string | null
          monthly_allowance?: number | null
          onboarding_completed?: boolean
          other_income?: number | null
          parent_insurance_type?: string | null
          residence_city?: string | null
          student_type?: string | null
          terms_accepted?: boolean
          updated_at?: string
        }
        Relationships: []
      }
      shifts: {
        Row: {
          created_at: string
          date: string
          employer_id: string
          hourly_wage: number | null
          hours: number
          id: string
          updated_at: string
          user_id: string
        }
        Insert: {
          created_at?: string
          date: string
          employer_id: string
          hourly_wage?: number | null
          hours: number
          id?: string
          updated_at?: string
          user_id: string
        }
        Update: {
          created_at?: string
          date?: string
          employer_id?: string
          hourly_wage?: number | null
          hours?: number
          id?: string
          updated_at?: string
          user_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "shifts_employer_id_fkey"
            columns: ["employer_id"]
            isOneToOne: false
            referencedRelation: "employers"
            referencedColumns: ["id"]
          },
        ]
      }
      work_schedules: {
        Row: {
          created_at: string
          day_of_week: number
          employer_id: string
          hours: number
          id: string
          updated_at: string
          user_id: string
        }
        Insert: {
          created_at?: string
          day_of_week: number
          employer_id: string
          hours: number
          id?: string
          updated_at?: string
          user_id: string
        }
        Update: {
          created_at?: string
          day_of_week?: number
          employer_id?: string
          hours?: number
          id?: string
          updated_at?: string
          user_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "work_schedules_employer_id_fkey"
            columns: ["employer_id"]
            isOneToOne: false
            referencedRelation: "employers"
            referencedColumns: ["id"]
          },
        ]
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      [_ in never]: never
    }
    Enums: {
      [_ in never]: never
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}

type DatabaseWithoutInternals = Omit<Database, "__InternalSupabase">

type DefaultSchema = DatabaseWithoutInternals[Extract<keyof Database, "public">]

export type Tables<
  DefaultSchemaTableNameOrOptions extends
    | keyof (DefaultSchema["Tables"] & DefaultSchema["Views"])
    | { schema: keyof DatabaseWithoutInternals },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals
  }
    ? keyof (DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"] &
        DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Views"])
    : never = never,
> = DefaultSchemaTableNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals
}
  ? (DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"] &
      DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Views"])[TableName] extends {
      Row: infer R
    }
    ? R
    : never
  : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema["Tables"] &
        DefaultSchema["Views"])
    ? (DefaultSchema["Tables"] &
        DefaultSchema["Views"])[DefaultSchemaTableNameOrOptions] extends {
        Row: infer R
      }
      ? R
      : never
    : never

export type TablesInsert<
  DefaultSchemaTableNameOrOptions extends
    | keyof DefaultSchema["Tables"]
    | { schema: keyof DatabaseWithoutInternals },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals
  }
    ? keyof DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = DefaultSchemaTableNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals
}
  ? DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Insert: infer I
    }
    ? I
    : never
  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema["Tables"]
    ? DefaultSchema["Tables"][DefaultSchemaTableNameOrOptions] extends {
        Insert: infer I
      }
      ? I
      : never
    : never

export type TablesUpdate<
  DefaultSchemaTableNameOrOptions extends
    | keyof DefaultSchema["Tables"]
    | { schema: keyof DatabaseWithoutInternals },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals
  }
    ? keyof DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = DefaultSchemaTableNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals
}
  ? DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Update: infer U
    }
    ? U
    : never
  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema["Tables"]
    ? DefaultSchema["Tables"][DefaultSchemaTableNameOrOptions] extends {
        Update: infer U
      }
      ? U
      : never
    : never

export type Enums<
  DefaultSchemaEnumNameOrOptions extends
    | keyof DefaultSchema["Enums"]
    | { schema: keyof DatabaseWithoutInternals },
  EnumName extends DefaultSchemaEnumNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals
  }
    ? keyof DatabaseWithoutInternals[DefaultSchemaEnumNameOrOptions["schema"]]["Enums"]
    : never = never,
> = DefaultSchemaEnumNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals
}
  ? DatabaseWithoutInternals[DefaultSchemaEnumNameOrOptions["schema"]]["Enums"][EnumName]
  : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema["Enums"]
    ? DefaultSchema["Enums"][DefaultSchemaEnumNameOrOptions]
    : never

export type CompositeTypes<
  PublicCompositeTypeNameOrOptions extends
    | keyof DefaultSchema["CompositeTypes"]
    | { schema: keyof DatabaseWithoutInternals },
  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals
  }
    ? keyof DatabaseWithoutInternals[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"]
    : never = never,
> = PublicCompositeTypeNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals
}
  ? DatabaseWithoutInternals[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"][CompositeTypeName]
  : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema["CompositeTypes"]
    ? DefaultSchema["CompositeTypes"][PublicCompositeTypeNameOrOptions]
    : never

export const Constants = {
  public: {
    Enums: {},
  },
} as const


// Custom helper types for easier usage (avoiding conflicts with generated types)
export type AppTables<T extends keyof Database['public']['Tables']> = Database['public']['Tables'][T]['Row'];
export type AppTablesInsert<T extends keyof Database['public']['Tables']> = Database['public']['Tables'][T]['Insert'];
export type AppTablesUpdate<T extends keyof Database['public']['Tables']> = Database['public']['Tables'][T]['Update'];

// Commonly used table types with app-specific naming
export type AppProfile = AppTables<'profiles'>;
export type AppProfileInsert = AppTablesInsert<'profiles'>;
export type AppProfileUpdate = AppTablesUpdate<'profiles'>;

export type AppEmployer = AppTables<'employers'>;
export type AppEmployerInsert = AppTablesInsert<'employers'>;
export type AppEmployerUpdate = AppTablesUpdate<'employers'>;

export type AppIncome = AppTables<'incomes'>;
export type AppIncomeInsert = AppTablesInsert<'incomes'>;
export type AppIncomeUpdate = AppTablesUpdate<'incomes'>;

export type AppShift = AppTables<'shifts'>;
export type AppShiftInsert = AppTablesInsert<'shifts'>;
export type AppShiftUpdate = AppTablesUpdate<'shifts'>;

export type AppWorkSchedule = AppTables<'work_schedules'>;
export type AppWorkScheduleInsert = AppTablesInsert<'work_schedules'>;
export type AppWorkScheduleUpdate = AppTablesUpdate<'work_schedules'>;
